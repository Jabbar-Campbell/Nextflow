#!/bin/sh/ nextflow

# In this script we will perform our first RNA-SEQ pipeline
# It will consist of several steps/ tools
#          step 1: Index a Transcriptome
#          step 2  Run QC using "FastQC"
#          step 3  Run a Quantification using "Salmon"
#          step 4  Create a report using "MultiQC"


#first lets set some parameters as seen before using the
#params function. We feed it a name and what its default
#value will be. In this case paths to a file...
# reads are our fq files
# transcriptome_file will be our reference genome file
# multiqc will be a folder where our report goes
# nextflow run scriptname.nf --reads <new parameter> --transriptome_file <new parameter>
# changes the parameter off of the default

####################################################################################
############################### INDEX ##############################################

params.reads = "$projectDIR/data/gga;/gut_{1,2}.fq" 
params.transcriptome_file = "$projectDir/data/ggal/transcriptome.fa"
params.multiqc = "$projectDir/multiqc"
parmas.outdir = "$projectDir/output"


log_info = """
  RNASEQ-NF PIPELINE
  ==================
  The read files are ${reads}
  The Transroptome file is ${transcriptome}
  The multiQC directory is ${multiqc1} 
  The Output Directoy is ${outdir}
  """

#we could feed this process new parameters and store in the variable results
#with ...
results = log_info.execute().<new_parameters>



# its one thing to use {} indicating a script but if we preceed with process
# funciton we must have an input and output and some work to be done, in this case
# we take a path as input use it in a call to salmon along with some other
# other options  which we'll learn later and then create a channel output called
# salmon_index which we define as a path

process INDEX{
   input:
     path transcriptome  ##set variables....fed in by the script as $transriptome

   output:
     path 'salmon_index' #not a channel yet but it will be set to index_ch later on ;)

    script:
     """
     salmon index --threads $task.cpus -t $transcriptome -i salmon_index

     """

}





# pairs of reads must now be grouped so that they can me mapped to the index file
# this is done with the .fromFilePairs( checIFExist: true) function
# the result must be set to channel name


read_pairs_ch =  Channel.fromFilePairs(params.reads) 
#or
.fromFilePairs(params.reads).set(read_pairs_ch)








####################################################################################
############################### QUANTIFICATION  ###################################

# Now that we have an indexed genome and read pairs we are ready to Quantify
# with the following process. Salmon takes the index  sample id plus the reads and
# spits out and output path called sample id
# if you wanted to limit the number of CPU you could set that
# the global variable $task.cpus variable


process QUANTIFICATION {
  tag "$sample_id" #tags help flag a variable and is a readout for each time a process is being used
  
input:
 path salmon_index    #set variables.....this is fed in in the script as $salmon index
 tuple val(sample_id), path(reads) #set variables.....this is fed in by the script as read[0] read[1] $sample_id

output:
  path "$sample_id"


script:
   """
   salmon quant --threads $task.cpus --libType=U -i $salmon_index -1 ${reads[0]} -2 ${reads[1]} -o $sample_id

   """
publishDir params.outdir mode: 'copy' #the output is a path for this process but publishDir sends a copy to the folder of your choosing
                          #why isnt this the variable ${outdir}????????????????????

}




#####################################################################################
################################ QUALITY  CONTROL ###################################

# This process takes the tuples produced by the  read_pairs channel
# and uses the fastqc function to make output folders
# on for each sample_id

process FASTQC {
input:
   tuple val(sample_id),path(reads) #set variables

output:
   path "fastqc__${sample_id}_logs" # you almost have to know what fastqc does and spits out

script:
   """
   mkdir fastqc_${sample_id}_logs #make a directory on for each sample id
   fastqc -o fastqc_${sample_id}_logs -f fastq -q ${reads} #use this target directory as a place to put the fast q reads

   """

}



########################################################################################
##############################  QC REPORT #############################################
# Now that we've created paired reads
# use them to quantify against an index
# and perfermed QC on that quantification
# its time for a report using the multiqc function...

process MULTIQC{
input:
   path '*' #the input variable


output:
   path 'mult_report.html'

script:
   """
   multiqc .  #when the process is called in workflow (see below) it knows where to look based on the arguments provided ie quant_ch

   """


}





######################################################################################
##############################  WORKFLOW ##############################################

# Workflows call on and string together several processess
# here we are creating on a read_pairs channel
# the INDEX process defined above is used and its information is converted to
# a second channel called index_ch. This is used in
# a following process called Quantification. who also creates a channel
# called quant_ch    you can view each channel in the out put with .view()

workflow {
  read_pairs_ch = Channel.fromFilePairs(params.reads)

  index_ch = INDEX(params.transcriptome_file)
  
  quant_ch = QUANTIFICATION(index_ch, read_pairs_ch )

  fastqc_ch =  FASTQC(read_pairs_ch) #remember this channel is a tuple the process will name the variable as it comes in
 
  multiqc_ch = MULTIQC(quant_ch.mix(fastqc_ch).collect()) #the .collect() function combines channels so that things arent run iteratively


}


# nextflow.config files allow options like running with docker or sending emails out when something is executed
# also instead of calling on salmon or other commands in the script area of a process
# we can call on bash files. or  even R or python scripts.
# as along as it know what to call the output from the script we're golden
