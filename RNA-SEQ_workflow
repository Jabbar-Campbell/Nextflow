#!/bin/sh/ nextflow

# In this script we will perform our first RNA-SEQ pipeline
# It will consist of several steps/ tools
#          step 1: Index a Transcriptome
#          step 2  Run QC using "FastQC"
#          step 3  Run a Quantification using "Salmon"
#          step 4  Create a report using "MultiQC"


#first lets set some parameters as seen before using the
#params function. We feed it a name and what its default
#value will be. In this case paths to a file...
# reads are our fq files
# transcriptome_file will be our reference genome file
# multiqc will be a folder where our report goes
# nextflow run scriptname.nf --reads <new parameter> --transriptome_file <new parameter>
# changes the parameter off of the default

####################################################################################
############################### INDEX ##############################################

params.reads = "$projectDIR/data/gga;/gut_{1,2}.fq" 
params.transcriptome_file = "$projectDir/data/ggal/transcriptome.fa"
params.multiqc = "$projectDir/multiqc"
#parmas.outdir = "<path to a directory for workflow ooutout>"


log_info = """
  RNASEQ-NF PIPELINE
  ==================
  The read files are ${reads}
  The Transroptome file is ${transcriptome}
  The multiQC directory is ${multiqc1} 
  """

#we could feed this process new parameters and store in the variable results
#with ...
results = log_info.execute().<new_parameters>



# its one thing to use {} indicating a script but if we preceed with process
# funciton we must have an input and output and some work to be done, in this case
# we take a path as input use it in a call to salmon along with some other
# other options  which we'll learn later and then create a channel output called
# salmon_index which we define as a path

process INDEX{
   input:
     path transcriptome  #fed in by the script as $transriptome

   output:
     path 'salmon_index' #not a channel yet but it will be set to index_ch later on ;)

    script:
     """
     salmon index --threads $task.cpus -t $transcriptome -i salmon_index

     """

}





# pairs of reads must now be grouped so that they can me mapped to the index file
# this is done with the .fromFilePairs( checIFExist: true) function
# the result must be set to channel name


read_pairs_ch =  Channel.fromFilePairs(params.reads) 
#or
.fromFilePairs(params.reads).set(read_pairs_ch)








####################################################################################
############################### QUANTIFICATION  ###################################

# Now that we have an indexed genome and read pairs we are ready to Quantify
# with the following process. Salmon takes the index  sample id plus the reads and
# spits out and output path called sample id
# if you wanted to limit the number of CPU you could set that
# the global variable $task.cpus variable


process QUANTIFICATION {

input:
 path salmon_index    #this is fed in in the script as $salmon index
 tuple val(sample_id), path(reads) #this is fed in by the script as read[0] read[1] $sample_id

output:
  path "$sample_id"


script:
   """
   salmon quant --threads $task.cpus --libType=U -i $salmon_index -1 ${reads[0]} -2 ${reads[1]} -o $sample_id

   """

}



######################################################################################
##############################  WORKFLOW ##############################################

# Workflows call on and string together several processess
# here we are creating on a read_pairs channel
# the INDEX process defined above is used and its information is converted to
# a second channel called index_ch. This is used in
# a following process called Quantification. who also creates a channel
# called quant_ch

workflow {
  read_pairs_ch = Channel.fromFilePairs(params.reads)

  index_ch = INDEX(params.transcriptome_file)
  
  quant_ch = QUANTIFICATION(index_ch, read_pairs_ch )


}


